using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;
using LemmaSharp;

namespace Utility
{
    public class TextUtil
    {
        private readonly ILemmatizer _lmtz;

        private static readonly List<string> StopWords = new List<string>
        {
            { "a"},
            { "about"},
            { "above"},
            { "across"},
            { "after"},
            { "afterwards"},
            { "again"},
            { "against"},
            { "all"},
            { "almost"},
            { "alone"},
            { "along"},
            { "already"},
            { "also"},
            { "although"},
            { "always"},
            { "am"},
            { "among"},
            { "amongst"},
            { "amount"},
            { "an"},
            { "and"},
            { "another"},
            { "any"},
            { "anyhow"},
            { "anyone"},
            { "anything"},
            { "anyway"},
            { "anywhere"},
            { "are"},
            { "around"},
            { "as"},
            { "at"},
            { "back"},
            { "be"},
            { "became"},
            { "because"},
            { "become"},
            { "becomes"},
            { "becoming"},
            { "been"},
            { "before"},
            { "beforehand"},
            { "behind"},
            { "being"},
            { "below"},
            { "beside"},
            { "besides"},
            { "between"},
            { "beyond"},
            { "bill"},
            { "both"},
            { "bottom"},
            { "but"},
            { "by"},
            { "call"},
            { "can"},
            { "cannot"},
            { "cant"},
            { "co"},
            { "computer"},
            { "con"},
            { "could"},
            { "couldnt"},
            { "cry"},
            { "de"},
            { "describe"},
            { "detail"},
            { "do"},
            { "done"},
            { "down"},
            { "due"},
            { "during"},
            { "each"},
            { "eg"},
            { "eight"},
            { "either"},
            { "eleven"},
            { "else"},
            { "elsewhere"},
            { "empty"},
            { "enough"},
            { "etc"},
            { "even"},
            { "ever"},
            { "every"},
            { "everyone"},
            { "everything"},
            { "everywhere"},
            { "except"},
            { "few"},
            { "fifteen"},
            { "fify"},
            { "fill"},
            { "find"},
            { "fire"},
            { "first"},
            { "five"},
            { "for"},
            { "former"},
            { "formerly"},
            { "forty"},
            { "found"},
            { "four"},
            { "from"},
            { "front"},
            { "full"},
            { "further"},
            { "get"},
            { "give"},
            { "go"},
            { "had"},
            { "has"},
            { "have"},
            { "he"},
            { "hence"},
            { "her"},
            { "here"},
            { "hereafter"},
            { "hereby"},
            { "herein"},
            { "hereupon"},
            { "hers"},
            { "herself"},
            { "him"},
            { "himself"},
            { "his"},
            { "how"},
            { "however"},
            { "hundred"},
            { "i"},
            { "ie"},
            { "if"},
            { "in"},
            { "inc"},
            { "indeed"},
            { "interest"},
            { "into"},
            { "is"},
            { "it"},
            { "its"},
            { "itself"},
            { "keep"},
            { "last"},
            { "latter"},
            { "latterly"},
            { "least"},
            { "less"},
            { "ltd"},
            { "made"},
            { "many"},
            { "may"},
            { "me"},
            { "meanwhile"},
            { "might"},
            { "mill"},
            { "mine"},
            { "more"},
            { "moreover"},
            { "most"},
            { "mostly"},
            { "move"},
            { "much"},
            { "must"},
            { "my"},
            { "myself"},
            { "name"},
            { "namely"},
            { "neither"},
            { "never"},
            { "nevertheless"},
            { "next"},
            { "nine"},
            { "no"},
            { "nobody"},
            { "none"},
            { "nor"},
            { "not"},
            { "nothing"},
            { "now"},
            { "nowhere"},
            { "of"},
            { "off"},
            { "often"},
            { "on"},
            { "once"},
            { "one"},
            { "only"},
            { "onto"},
            { "or"},
            { "other"},
            { "others"},
            { "otherwise"},
            { "our"},
            { "ours"},
            { "ourselves"},
            { "out"},
            { "over"},
            { "own"},
            { "part"},
            { "per"},
            { "perhaps"},
            { "please"},
            { "put"},
            { "rather"},
            { "re"},
            { "same"},
            { "see"},
            { "seem"},
            { "seemed"},
            { "seeming"},
            { "seems"},
            { "serious"},
            { "several"},
            { "she"},
            { "should"},
            { "show"},
            { "side"},
            { "since"},
            { "sincere"},
            { "six"},
            { "sixty"},
            { "so"},
            { "some"},
            { "somehow"},
            { "someone"},
            { "something"},
            { "sometime"},
            { "sometimes"},
            { "somewhere"},
            { "still"},
            { "such"},
            { "system"},
            { "take"},
            { "ten"},
            { "than"},
            { "that"},
            { "the"},
            { "their"},
            { "them"},
            { "themselves"},
            { "then"},
            { "thence"},
            { "there"},
            { "thereafter"},
            { "thereby"},
            { "therefore"},
            { "therein"},
            { "thereupon"},
            { "these"},
            { "they"},
            { "thick"},
            { "thin"},
            { "third"},
            { "this"},
            { "those"},
            { "though"},
            { "three"},
            { "through"},
            { "throughout"},
            { "thru"},
            { "thus"},
            { "to"},
            { "together"},
            { "too"},
            { "top"},
            { "toward"},
            { "towards"},
            { "twelve"},
            { "twenty"},
            { "two"},
            { "un"},
            { "under"},
            { "until"},
            { "up"},
            { "upon"},
            { "us"},
            { "very"},
            { "via"},
            { "was"},
            { "we"},
            { "well"},
            { "were"},
            { "what"},
            { "whatever"},
            { "when"},
            { "whence"},
            { "whenever"},
            { "where"},
            { "whereafter"},
            { "whereas"},
            { "whereby"},
            { "wherein"},
            { "whereupon"},
            { "wherever"},
            { "whether"},
            { "which"},
            { "while"},
            { "whither"},
            { "who"},
            { "whoever"},
            { "whole"},
            { "whom"},
            { "whose"},
            { "why"},
            { "will"},
            { "with"},
            { "within"},
            { "without"},
            { "would"},
            { "yet"},
            { "you"},
            { "your"},
            { "yours"},
            { "yourself"},
            { "yourselves"}
        };

        public TextUtil()
        {
            _lmtz = new LemmatizerPrebuiltCompact(LanguagePrebuilt.English);
        }

        public List<string> FilterWords(string sentence)
        {
            var words = sentence
                .Replace("?", "")
                .Replace("\"", "")
                .ToLower()
                .Split(' ')
                .ToList();

            words = RemoveStopWords(words);
            words = LemmatizeWord(words);
            
            return words;
        }

        public List<string> LemmatizeWord(List<string> words)
        {
            for (var i = 0; i < words.Count; i++)
            {
                words[i] = _lmtz.Lemmatize(words[i].Trim());
            }

            return words;
        }

        public List<string> GetDoubleQuotedWords(string sentence)
        {
            return Regex.Matches(sentence, "\"[\\w ]*\"")
                .Cast<Match>()
                .Select(m => m.Value.Replace("\"", ""))
                .ToList();
        }

        public string RemoveDoubleQuotedOWrds(string sentence)
        {
            var quotedWords = Regex.Matches(sentence, "\"[\\w ]*\"")
                .Cast<Match>()
                .Select(m => m.Value)
                .ToList();

            var words = sentence.Split(' ').ToList();

            words.RemoveAll(word => quotedWords.Contains(word));

            return string.Join(" ", words);
        }
        
        public List<string> RemoveStopWords(IEnumerable<string> words)
        {
            return words.Except(StopWords).ToList();
        }
    }
}